// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UpdateInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UpdateInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UpdateInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "CreateObjectInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UpdateInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UpdateInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UpdateInfo_2eproto;
class AttakeInfo;
class AttakeInfoDefaultTypeInternal;
extern AttakeInfoDefaultTypeInternal _AttakeInfo_default_instance_;
class SkillInfo;
class SkillInfoDefaultTypeInternal;
extern SkillInfoDefaultTypeInternal _SkillInfo_default_instance_;
class UpdateInfo;
class UpdateInfoDefaultTypeInternal;
extern UpdateInfoDefaultTypeInternal _UpdateInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AttakeInfo* Arena::CreateMaybeMessage<::AttakeInfo>(Arena*);
template<> ::SkillInfo* Arena::CreateMaybeMessage<::SkillInfo>(Arena*);
template<> ::UpdateInfo* Arena::CreateMaybeMessage<::UpdateInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class UpdateInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdateInfo) */ {
 public:
  UpdateInfo();
  virtual ~UpdateInfo();

  UpdateInfo(const UpdateInfo& from);
  UpdateInfo(UpdateInfo&& from) noexcept
    : UpdateInfo() {
    *this = ::std::move(from);
  }

  inline UpdateInfo& operator=(const UpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateInfo& operator=(UpdateInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateInfo* internal_default_instance() {
    return reinterpret_cast<const UpdateInfo*>(
               &_UpdateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UpdateInfo& a, UpdateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateInfo* New() const final {
    return CreateMaybeMessage<UpdateInfo>(nullptr);
  }

  UpdateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateInfo& from);
  void MergeFrom(const UpdateInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdateInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UpdateInfo_2eproto);
    return ::descriptor_table_UpdateInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kRotationFieldNumber = 3,
  };
  // .YVector2 Position = 2;
  bool has_position() const;
  void clear_position();
  const ::YVector2& position() const;
  ::YVector2* release_position();
  ::YVector2* mutable_position();
  void set_allocated_position(::YVector2* position);

  // int32 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float Rotation = 3;
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);

  // @@protoc_insertion_point(class_scope:UpdateInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::YVector2* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  float rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UpdateInfo_2eproto;
};
// -------------------------------------------------------------------

class AttakeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AttakeInfo) */ {
 public:
  AttakeInfo();
  virtual ~AttakeInfo();

  AttakeInfo(const AttakeInfo& from);
  AttakeInfo(AttakeInfo&& from) noexcept
    : AttakeInfo() {
    *this = ::std::move(from);
  }

  inline AttakeInfo& operator=(const AttakeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttakeInfo& operator=(AttakeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttakeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttakeInfo* internal_default_instance() {
    return reinterpret_cast<const AttakeInfo*>(
               &_AttakeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AttakeInfo& a, AttakeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AttakeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttakeInfo* New() const final {
    return CreateMaybeMessage<AttakeInfo>(nullptr);
  }

  AttakeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttakeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttakeInfo& from);
  void MergeFrom(const AttakeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttakeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AttakeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UpdateInfo_2eproto);
    return ::descriptor_table_UpdateInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 4,
    kPlayerIdFieldNumber = 1,
    kDamageFieldNumber = 2,
    kEffectsIndexFieldNumber = 3,
  };
  // .YVector2 Position = 4;
  bool has_position() const;
  void clear_position();
  const ::YVector2& position() const;
  ::YVector2* release_position();
  ::YVector2* mutable_position();
  void set_allocated_position(::YVector2* position);

  // int32 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 Damage = 2;
  void clear_damage();
  ::PROTOBUF_NAMESPACE_ID::int32 damage() const;
  void set_damage(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 EffectsIndex = 3;
  void clear_effectsindex();
  ::PROTOBUF_NAMESPACE_ID::int32 effectsindex() const;
  void set_effectsindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:AttakeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::YVector2* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 damage_;
  ::PROTOBUF_NAMESPACE_ID::int32 effectsindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UpdateInfo_2eproto;
};
// -------------------------------------------------------------------

class SkillInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SkillInfo) */ {
 public:
  SkillInfo();
  virtual ~SkillInfo();

  SkillInfo(const SkillInfo& from);
  SkillInfo(SkillInfo&& from) noexcept
    : SkillInfo() {
    *this = ::std::move(from);
  }

  inline SkillInfo& operator=(const SkillInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillInfo& operator=(SkillInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SkillInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SkillInfo* internal_default_instance() {
    return reinterpret_cast<const SkillInfo*>(
               &_SkillInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SkillInfo& a, SkillInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SkillInfo* New() const final {
    return CreateMaybeMessage<SkillInfo>(nullptr);
  }

  SkillInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SkillInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SkillInfo& from);
  void MergeFrom(const SkillInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SkillInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UpdateInfo_2eproto);
    return ::descriptor_table_UpdateInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .YVector2 Position = 3;
  bool has_position() const;
  void clear_position();
  const ::YVector2& position() const;
  ::YVector2* release_position();
  ::YVector2* mutable_position();
  void set_allocated_position(::YVector2* position);

  // int32 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:SkillInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::YVector2* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UpdateInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UpdateInfo

// int32 PlayerId = 1;
inline void UpdateInfo::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateInfo::playerid() const {
  // @@protoc_insertion_point(field_get:UpdateInfo.PlayerId)
  return playerid_;
}
inline void UpdateInfo::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:UpdateInfo.PlayerId)
}

// .YVector2 Position = 2;
inline bool UpdateInfo::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::YVector2& UpdateInfo::position() const {
  const ::YVector2* p = position_;
  // @@protoc_insertion_point(field_get:UpdateInfo.Position)
  return p != nullptr ? *p : *reinterpret_cast<const ::YVector2*>(
      &::_YVector2_default_instance_);
}
inline ::YVector2* UpdateInfo::release_position() {
  // @@protoc_insertion_point(field_release:UpdateInfo.Position)
  
  ::YVector2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::YVector2* UpdateInfo::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::YVector2>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:UpdateInfo.Position)
  return position_;
}
inline void UpdateInfo::set_allocated_position(::YVector2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:UpdateInfo.Position)
}

// float Rotation = 3;
inline void UpdateInfo::clear_rotation() {
  rotation_ = 0;
}
inline float UpdateInfo::rotation() const {
  // @@protoc_insertion_point(field_get:UpdateInfo.Rotation)
  return rotation_;
}
inline void UpdateInfo::set_rotation(float value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:UpdateInfo.Rotation)
}

// -------------------------------------------------------------------

// AttakeInfo

// int32 PlayerId = 1;
inline void AttakeInfo::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttakeInfo::playerid() const {
  // @@protoc_insertion_point(field_get:AttakeInfo.PlayerId)
  return playerid_;
}
inline void AttakeInfo::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:AttakeInfo.PlayerId)
}

// int32 Damage = 2;
inline void AttakeInfo::clear_damage() {
  damage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttakeInfo::damage() const {
  // @@protoc_insertion_point(field_get:AttakeInfo.Damage)
  return damage_;
}
inline void AttakeInfo::set_damage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  damage_ = value;
  // @@protoc_insertion_point(field_set:AttakeInfo.Damage)
}

// int32 EffectsIndex = 3;
inline void AttakeInfo::clear_effectsindex() {
  effectsindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AttakeInfo::effectsindex() const {
  // @@protoc_insertion_point(field_get:AttakeInfo.EffectsIndex)
  return effectsindex_;
}
inline void AttakeInfo::set_effectsindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  effectsindex_ = value;
  // @@protoc_insertion_point(field_set:AttakeInfo.EffectsIndex)
}

// .YVector2 Position = 4;
inline bool AttakeInfo::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::YVector2& AttakeInfo::position() const {
  const ::YVector2* p = position_;
  // @@protoc_insertion_point(field_get:AttakeInfo.Position)
  return p != nullptr ? *p : *reinterpret_cast<const ::YVector2*>(
      &::_YVector2_default_instance_);
}
inline ::YVector2* AttakeInfo::release_position() {
  // @@protoc_insertion_point(field_release:AttakeInfo.Position)
  
  ::YVector2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::YVector2* AttakeInfo::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::YVector2>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AttakeInfo.Position)
  return position_;
}
inline void AttakeInfo::set_allocated_position(::YVector2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:AttakeInfo.Position)
}

// -------------------------------------------------------------------

// SkillInfo

// int32 PlayerId = 1;
inline void SkillInfo::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SkillInfo::playerid() const {
  // @@protoc_insertion_point(field_get:SkillInfo.PlayerId)
  return playerid_;
}
inline void SkillInfo::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:SkillInfo.PlayerId)
}

// int32 type = 2;
inline void SkillInfo::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SkillInfo::type() const {
  // @@protoc_insertion_point(field_get:SkillInfo.type)
  return type_;
}
inline void SkillInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SkillInfo.type)
}

// .YVector2 Position = 3;
inline bool SkillInfo::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::YVector2& SkillInfo::position() const {
  const ::YVector2* p = position_;
  // @@protoc_insertion_point(field_get:SkillInfo.Position)
  return p != nullptr ? *p : *reinterpret_cast<const ::YVector2*>(
      &::_YVector2_default_instance_);
}
inline ::YVector2* SkillInfo::release_position() {
  // @@protoc_insertion_point(field_release:SkillInfo.Position)
  
  ::YVector2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::YVector2* SkillInfo::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::YVector2>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SkillInfo.Position)
  return position_;
}
inline void SkillInfo::set_allocated_position(::YVector2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:SkillInfo.Position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UpdateInfo_2eproto
